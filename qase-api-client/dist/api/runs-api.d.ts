/**
 * Qase.io TestOps API v1
 * Qase TestOps API v1 Specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@qase.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { BaseResponse } from '../model';
import { IdResponse } from '../model';
import { RunCreate } from '../model';
import { RunListResponse } from '../model';
import { RunPublic } from '../model';
import { RunPublicResponse } from '../model';
import { RunResponse } from '../model';
import { RunexternalIssues } from '../model';
import { Runupdate } from '../model';
/**
 * RunsApi - axios parameter creator
 * @export
 */
export declare const RunsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This method allows to complete a specific run.
     * @summary Complete a specific run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeRun: (code: string, id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to create a run in selected project.
     * @summary Create a new run
     * @param {string} code Code of project, where to search entities.
     * @param {RunCreate} runCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRun: (code: string, runCreate: RunCreate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method completely deletes a run from repository.
     * @summary Delete run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRun: (code: string, id: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve a specific run.
     * @summary Get a specific run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {string} [include] Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects, external_issue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRun: (code: string, id: number, include?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to retrieve all runs stored in selected project.
     * @summary Get all runs
     * @param {string} code Code of project, where to search entities.
     * @param {string} [search]
     * @param {string} [status] A list of status values separated by comma. Possible values: in_progress, passed, failed, aborted, active (deprecated), complete (deprecated), abort (deprecated).
     * @param {number} [milestone]
     * @param {number} [environment]
     * @param {number} [fromStartTime]
     * @param {number} [toStartTime]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {string} [include] Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects, external_issue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRuns: (code: string, search?: string, status?: string, milestone?: number, environment?: number, fromStartTime?: number, toStartTime?: number, limit?: number, offset?: number, include?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows you to update links between test runs and external issues (such as Jira tickets).  You can use this endpoint to: - Link test runs to external issues by providing the external issue identifier (e.g., \"PROJ-1234\") - Update existing links by providing a new external issue identifier - Remove existing links by setting the external_issue field to null  **Important**: Each test run can have only one link with an external issue. If a test run already has an external issue link, providing a new external_issue value will replace the existing link.  The endpoint supports both Jira Cloud and Jira Server integrations. Each request can update multiple test run links in a single operation.
     * @summary Update external issues for runs
     * @param {string} code Code of project, where to search entities.
     * @param {RunexternalIssues} runexternalIssues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runUpdateExternalIssue: (code: string, runexternalIssues: RunexternalIssues, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to update a specific run.
     * @summary Update a specific run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {Runupdate} runupdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRun: (code: string, id: number, runupdate: Runupdate, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This method allows to update a publicity of specific run.
     * @summary Update publicity of a specific run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {RunPublic} runPublic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRunPublicity: (code: string, id: number, runPublic: RunPublic, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RunsApi - functional programming interface
 * @export
 */
export declare const RunsApiFp: (configuration?: Configuration) => {
    /**
     * This method allows to complete a specific run.
     * @summary Complete a specific run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeRun(code: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * This method allows to create a run in selected project.
     * @summary Create a new run
     * @param {string} code Code of project, where to search entities.
     * @param {RunCreate} runCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRun(code: string, runCreate: RunCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>>;
    /**
     * This method completely deletes a run from repository.
     * @summary Delete run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRun(code: string, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdResponse>>;
    /**
     * This method allows to retrieve a specific run.
     * @summary Get a specific run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {string} [include] Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects, external_issue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRun(code: string, id: number, include?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunResponse>>;
    /**
     * This method allows to retrieve all runs stored in selected project.
     * @summary Get all runs
     * @param {string} code Code of project, where to search entities.
     * @param {string} [search]
     * @param {string} [status] A list of status values separated by comma. Possible values: in_progress, passed, failed, aborted, active (deprecated), complete (deprecated), abort (deprecated).
     * @param {number} [milestone]
     * @param {number} [environment]
     * @param {number} [fromStartTime]
     * @param {number} [toStartTime]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {string} [include] Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects, external_issue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRuns(code: string, search?: string, status?: string, milestone?: number, environment?: number, fromStartTime?: number, toStartTime?: number, limit?: number, offset?: number, include?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunListResponse>>;
    /**
     * This method allows you to update links between test runs and external issues (such as Jira tickets).  You can use this endpoint to: - Link test runs to external issues by providing the external issue identifier (e.g., \"PROJ-1234\") - Update existing links by providing a new external issue identifier - Remove existing links by setting the external_issue field to null  **Important**: Each test run can have only one link with an external issue. If a test run already has an external issue link, providing a new external_issue value will replace the existing link.  The endpoint supports both Jira Cloud and Jira Server integrations. Each request can update multiple test run links in a single operation.
     * @summary Update external issues for runs
     * @param {string} code Code of project, where to search entities.
     * @param {RunexternalIssues} runexternalIssues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runUpdateExternalIssue(code: string, runexternalIssues: RunexternalIssues, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This method allows to update a specific run.
     * @summary Update a specific run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {Runupdate} runupdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRun(code: string, id: number, runupdate: Runupdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * This method allows to update a publicity of specific run.
     * @summary Update publicity of a specific run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {RunPublic} runPublic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRunPublicity(code: string, id: number, runPublic: RunPublic, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunPublicResponse>>;
};
/**
 * RunsApi - factory interface
 * @export
 */
export declare const RunsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This method allows to complete a specific run.
     * @summary Complete a specific run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeRun(code: string, id: number, options?: any): AxiosPromise<BaseResponse>;
    /**
     * This method allows to create a run in selected project.
     * @summary Create a new run
     * @param {string} code Code of project, where to search entities.
     * @param {RunCreate} runCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRun(code: string, runCreate: RunCreate, options?: any): AxiosPromise<IdResponse>;
    /**
     * This method completely deletes a run from repository.
     * @summary Delete run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRun(code: string, id: number, options?: any): AxiosPromise<IdResponse>;
    /**
     * This method allows to retrieve a specific run.
     * @summary Get a specific run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {string} [include] Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects, external_issue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRun(code: string, id: number, include?: string, options?: any): AxiosPromise<RunResponse>;
    /**
     * This method allows to retrieve all runs stored in selected project.
     * @summary Get all runs
     * @param {string} code Code of project, where to search entities.
     * @param {string} [search]
     * @param {string} [status] A list of status values separated by comma. Possible values: in_progress, passed, failed, aborted, active (deprecated), complete (deprecated), abort (deprecated).
     * @param {number} [milestone]
     * @param {number} [environment]
     * @param {number} [fromStartTime]
     * @param {number} [toStartTime]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {string} [include] Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects, external_issue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRuns(code: string, search?: string, status?: string, milestone?: number, environment?: number, fromStartTime?: number, toStartTime?: number, limit?: number, offset?: number, include?: string, options?: any): AxiosPromise<RunListResponse>;
    /**
     * This method allows you to update links between test runs and external issues (such as Jira tickets).  You can use this endpoint to: - Link test runs to external issues by providing the external issue identifier (e.g., \"PROJ-1234\") - Update existing links by providing a new external issue identifier - Remove existing links by setting the external_issue field to null  **Important**: Each test run can have only one link with an external issue. If a test run already has an external issue link, providing a new external_issue value will replace the existing link.  The endpoint supports both Jira Cloud and Jira Server integrations. Each request can update multiple test run links in a single operation.
     * @summary Update external issues for runs
     * @param {string} code Code of project, where to search entities.
     * @param {RunexternalIssues} runexternalIssues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    runUpdateExternalIssue(code: string, runexternalIssues: RunexternalIssues, options?: any): AxiosPromise<void>;
    /**
     * This method allows to update a specific run.
     * @summary Update a specific run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {Runupdate} runupdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRun(code: string, id: number, runupdate: Runupdate, options?: any): AxiosPromise<BaseResponse>;
    /**
     * This method allows to update a publicity of specific run.
     * @summary Update publicity of a specific run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {RunPublic} runPublic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRunPublicity(code: string, id: number, runPublic: RunPublic, options?: any): AxiosPromise<RunPublicResponse>;
};
/**
 * RunsApi - object-oriented interface
 * @export
 * @class RunsApi
 * @extends {BaseAPI}
 */
export declare class RunsApi extends BaseAPI {
    /**
     * This method allows to complete a specific run.
     * @summary Complete a specific run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    completeRun(code: string, id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BaseResponse, any>>;
    /**
     * This method allows to create a run in selected project.
     * @summary Create a new run
     * @param {string} code Code of project, where to search entities.
     * @param {RunCreate} runCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    createRun(code: string, runCreate: RunCreate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
    /**
     * This method completely deletes a run from repository.
     * @summary Delete run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    deleteRun(code: string, id: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IdResponse, any>>;
    /**
     * This method allows to retrieve a specific run.
     * @summary Get a specific run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {string} [include] Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects, external_issue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    getRun(code: string, id: number, include?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RunResponse, any>>;
    /**
     * This method allows to retrieve all runs stored in selected project.
     * @summary Get all runs
     * @param {string} code Code of project, where to search entities.
     * @param {string} [search]
     * @param {string} [status] A list of status values separated by comma. Possible values: in_progress, passed, failed, aborted, active (deprecated), complete (deprecated), abort (deprecated).
     * @param {number} [milestone]
     * @param {number} [environment]
     * @param {number} [fromStartTime]
     * @param {number} [toStartTime]
     * @param {number} [limit] A number of entities in result set.
     * @param {number} [offset] How many entities should be skipped.
     * @param {string} [include] Include a list of related entities IDs into response. Should be separated by comma. Possible values: cases, defects, external_issue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    getRuns(code: string, search?: string, status?: string, milestone?: number, environment?: number, fromStartTime?: number, toStartTime?: number, limit?: number, offset?: number, include?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RunListResponse, any>>;
    /**
     * This method allows you to update links between test runs and external issues (such as Jira tickets).  You can use this endpoint to: - Link test runs to external issues by providing the external issue identifier (e.g., \"PROJ-1234\") - Update existing links by providing a new external issue identifier - Remove existing links by setting the external_issue field to null  **Important**: Each test run can have only one link with an external issue. If a test run already has an external issue link, providing a new external_issue value will replace the existing link.  The endpoint supports both Jira Cloud and Jira Server integrations. Each request can update multiple test run links in a single operation.
     * @summary Update external issues for runs
     * @param {string} code Code of project, where to search entities.
     * @param {RunexternalIssues} runexternalIssues
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    runUpdateExternalIssue(code: string, runexternalIssues: RunexternalIssues, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This method allows to update a specific run.
     * @summary Update a specific run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {Runupdate} runupdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    updateRun(code: string, id: number, runupdate: Runupdate, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BaseResponse, any>>;
    /**
     * This method allows to update a publicity of specific run.
     * @summary Update publicity of a specific run
     * @param {string} code Code of project, where to search entities.
     * @param {number} id Identifier.
     * @param {RunPublic} runPublic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunsApi
     */
    updateRunPublicity(code: string, id: number, runPublic: RunPublic, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RunPublicResponse, any>>;
}
